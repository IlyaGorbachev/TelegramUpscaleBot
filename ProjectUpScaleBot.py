#DeepVideoFake_bot
import json
import asyncio
import requests
import urllib.request
from Upscale import func_upscale
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from tokenbot import TOKEN_BOT

#–°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –≤–Ω–æ—Å–∏–º —Ç–æ–∫–µ–Ω
bot = AsyncTeleBot(TOKEN_BOT)

###Json –∏–Ω—Ñ–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, file_type_await=[None, "document", "audio", "video", "photo"]
#–ó–∞–ø–∏—Å—å
async def json_dump(id_user, id_chat=None, file_type_await=None, file_path_last=None, first_name=None, last_name=None, username=None, denoise=True):
    data = {
        "id_user": str(id_user),
        "id_chat": str(id_chat),
        "file_type_await": str(file_type_await),
        "file_path_last": str(file_path_last),
        "first_name": str(first_name),
        "last_name": str(last_name),
        "username": str(username),
        "denoise": denoise
    }
    with open("users_info/"+str(id_user)+".json", "w") as json_file:
        json.dump(data, json_file)
#–ò–∑–º–µ–Ω–µ–Ω–∏–µ json
async def json_mod(id_user, id_chat=None, file_type_await=None, file_path_last=None):
    with open("users_info/"+str(id_user)+".json", "r") as json_file:
        data = json.load(json_file)
        json_file.close()
    with open("users_info/"+str(id_user)+".json", "w") as json_file:
        if id_chat!=None: data["id_chat"]=str(id_chat)
        if file_type_await!=None: data["file_type_await"]=file_type_await
        if file_path_last!=None: data["file_path_last"]=file_path_last
        json.dump(data, json_file)
        
#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø —Ñ–∞–π–ª–∞
async def json_check_file(id_user):
    with open("users_info/"+str(id_user)+".json", "r") as json_file:
        data = json.load(json_file)
        return data["file_type_await"] 
#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ denoise
async def json_check_denoise(id_user):
    with open("users_info/"+str(id_user)+".json", "r") as json_file:
        data = json.load(json_file)
        return data["denoise"] 



###–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
#–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤  file_29.mp4: —Ñ–æ—Ä–º–∞—Ç
async def save_file(message, TOKEN_BOT, content_types):
    if content_types == "audio":
        getfile_type = message.audio
    elif content_types == "document":
        getfile_type = message.document
    elif content_types == "video":
        getfile_type = message.video
    elif content_types == "photo":
        getfile_type = message.photo[-1] #–ö–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç photo[0:1:2:3]

    #–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç file –∏ –ø–æ–ª—É—á–∞–µ–º path - —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª. https://api.telegram.org/file/bot<token>/<file_path> –∫–∞—á–∞–µ–º –æ—Ç—Å—é–¥–∞
    file = await bot.get_file(getfile_type.file_id)
    await bot.send_message(message.chat.id, "–ì—Ä—É–∑–∏–º —Ñ–∞–π–ª...")
    urllib.request.urlretrieve("https://api.telegram.org/file/bot"+TOKEN_BOT+"/"+file.file_path, file.file_path)
    await json_mod(id_user=message.from_user.id, file_path_last=file.file_path)
    await bot.send_message(message.chat.id, "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")

    if content_types == "photo":
        await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å...")
        func_upscale(file.file_path)
        photo = open('aiupscale/output/scaled_3x_denoise.png', 'rb')
        await bot.send_photo(message.chat.id, photo)
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        Button_start = types.KeyboardButton(text="–£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ")
        keyboard.add(Button_start)
        await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ.", reply_markup=keyboard)
    print("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", content_types, "–í–µ—Å: ", getfile_type.file_size)


    
###Emoji ‚öôÔ∏è üè† ‚úÖ ‚ùå

###–í—Å—è–∫–∏–µ –∫–Ω–æ–ø–∫–∏
keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
Button_start = types.KeyboardButton(text="–£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ")
Button_options = types.KeyboardButton(text="‚öôÔ∏è")
Button_home = types.KeyboardButton(text="üè†")
Button_denoise_on = types.KeyboardButton(text="Denoise‚úÖ")
Button_denoise_off = types.KeyboardButton(text="Denoise‚ùå")
cort_keyboard = (keyboard, Button_start, Button_options, Button_home, Button_denoise_on, Button_denoise_off)


###–ú–æ–¥—É–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
#content_types=['audio', 'photo', 'voice', 'video', 'document', 'text', 'location', 'contact', 'sticker']
# Handle '/start' and '/help'
@bot.message_handler(commands=['help', 'start'])
async def send_welcome(message, keyboard=cort_keyboard):
    await json_dump(message.from_user.id, message.chat.id)   
    keyboard[0].add(keyboard[1],keyboard[2])

    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n–Ø UpScaleImageBot 1.0 –∏ —è –º–æ–≥—É —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏.", reply_markup=keyboard[0])
   
#–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(content_types=["text"])
async def menu_message(message, keyboard=cort_keyboard):
    if message.text == "–£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ":
        await bot.send_message(message.chat.id, "–ñ–¥—É –∫–∞—Ä—Ç–∏–Ω–∫—É")
        await json_mod(message.from_user.id, file_type_await="photo")
    elif message.text == "‚öôÔ∏è":
        if json_check_denoise(message.from_user.id) == True: 
            keyboard[0].add(keyboard[4], keyboard[3])
        else:
            keyboard[0].add(keyboard[5], keyboard[3])
        await bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=keyboard[0])

    else:
        await bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")








#–î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@bot.message_handler(content_types=["document"])
async def file_message(message):
    if await json_check_file(message.from_user.id) == "document":
        await save_file(message, TOKEN_BOT, content_types="document")
        await json_mod(message.from_user.id, file_type_await="None")
    else:
        await bot.send_message(message.chat.id, "–Ø –∂–¥–∞–ª –¥—Ä—É–≥–æ–µ...")
     

#–î–ª—è audio
@bot.message_handler(content_types=["audio"])
async def file_message(message):
    if await json_check_file(message.from_user.id) == "audio":
        await save_file(message, TOKEN_BOT, content_types="audio")
        await json_mod(message.from_user.id, file_type_await="None")
    else:
        await bot.send_message(message.chat.id, "–Ø –∂–¥–∞–ª –¥—Ä—É–≥–æ–µ...")

#–î–ª—è video
@bot.message_handler(content_types=["video"])
async def file_message(message):
    if await json_check_file(message.from_user.id) == "video":
        await save_file(message, TOKEN_BOT, content_types="video")
        await json_mod(message.from_user.id, file_type_await="None")
        
    else:
        await bot.send_message(message.chat.id, "–Ø –∂–¥–∞–ª –¥—Ä—É–≥–æ–µ...")

#–î–ª—è photo
@bot.message_handler(content_types=["photo"])
async def file_message(message):
    if await json_check_file(message.from_user.id) == "photo":
        await save_file(message, TOKEN_BOT, content_types="photo")
        await json_mod(message.from_user.id, file_type_await="None")
    else:
        await bot.send_message(message.chat.id, "–Ø –∂–¥–∞–ª –¥—Ä—É–≥–æ–µ...")
    

asyncio.run(bot.polling())
